AWSTemplateFormatVersion: 2010-09-09
Description: 'Upgraded stack for hot standby Unicorn Shop with ALB'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: 'Use an AMI of your choosing, we recommend to use the latest available'
  IsPrimary:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: 'Is primary region'
Conditions:
  CreatePrimaryDB:
    !Equals [!Ref IsPrimary, 'yes']
  CreateSecondaryDB:
    !Equals [!Ref IsPrimary, 'no']
  EnableWriteFwd:
    !Equals [!Ref IsPrimary, 'no']
  IsPrimaryRegion:
    !Equals [!Ref IsPrimary, 'yes']
Resources:
  UniShopAppV1VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  UniShopAppV1IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      InternetGatewayId: !Ref UniShopAppV1IGW
  UniShopAppV1Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-1'
  UniShopAppV1Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-2'
  UniShopAppV1PublicRoutTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  UniShopAppV1PublicRout:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      GatewayId: !Ref UniShopAppV1IGW
      DestinationCidrBlock: 0.0.0.0/0
  UniShopAppV1PublicSubnetRoutTableAssoc1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      SubnetId: !Ref UniShopAppV1Subnet1
  UniShopAppV1PublicSubnetRoutTableAssoc2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      SubnetId: !Ref UniShopAppV1Subnet2
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref UniShopAppV1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: UniShopAppV1DBSubnetGroup
      SubnetIds:
        - !Ref UniShopAppV1Subnet1
        - !Ref UniShopAppV1Subnet2
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open App access
      VpcId: !Ref UniShopAppV1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  #ALB and target groups
  
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !If [IsPrimaryRegion, PrimaryTargetGroup, SecondaryTargetGroup]
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Targets: 
        - Id: !Ref EC2Instance
      TargetType: 'instance'
      VpcId: !Ref UniShopAppV1VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway    
    Properties:
      Name: !If [IsPrimaryRegion, PrimaryALB, SecondaryALB]
      Scheme: internet-facing
      Subnets:
      - Ref: UniShopAppV1Subnet1
      - Ref: UniShopAppV1Subnet2
      SecurityGroups:
      - Ref: EC2SecurityGroup
      IpAddressType: ipv4

  EC2SecurityGroupDBRule:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref DBSecurityGroup
  InstanceLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  S3InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref S3Role
  S3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !GetAtt
                - UIBucket
                - Arn
              - !GetAtt
                - AssetBucket
                - Arn
              - !Join
                - ''
                - - !GetAtt
                    - UIBucket
                    - Arn
                  - /*
              - !Join
                - ''
                - - !GetAtt
                    - AssetBucket
                    - Arn
                  - /*
          - Effect: Allow
            Action:
              - 'rds:ModifyDBCluster'
              - 'rds:Describe*'
            Resource:
              - '*'                        
      Roles:
        - !Ref S3Role
  S3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Path: /
  GlobalCluster:
    Condition: CreatePrimaryDB
    Type: 'AWS::RDS::GlobalCluster'
    Properties:
      GlobalClusterIdentifier: 'hot-global'
      SourceDBClusterIdentifier: !Ref RDSClusterPrimary
  RDSClusterPrimary:
    Condition: CreatePrimaryDB
    DeletionPolicy: Retain    
    DependsOn:
      - DBSubnetGroup
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername: UniShopAppV1User
      MasterUserPassword: UniShopAppV1Password
      DBClusterIdentifier: !Ref 'AWS::StackName'
      Port: 3306
      DBClusterParameterGroupName: default.aurora-mysql5.7
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.11.1
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DatabaseName: unishop
  RDSClusterSecondary:
    Condition: CreateSecondaryDB
    DeletionPolicy: Retain    
    DependsOn:
      - DBSubnetGroup
    Type: 'AWS::RDS::DBCluster'
    Properties:
      GlobalClusterIdentifier: 'hot-global'
      DBClusterIdentifier: 'hot-secondary'
      DBClusterParameterGroupName: default.aurora-mysql5.7
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.11.1
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Retain
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !If [CreatePrimaryDB, !Ref RDSClusterPrimary, !Ref RDSClusterSecondary]
      PubliclyAccessible: 'true'
      DBInstanceClass: db.r5.xlarge
      DBParameterGroupName: default.aurora-mysql5.7
      DBInstanceIdentifier: unishop-hot
  AssetBucket:
    Type: 'AWS::S3::Bucket'      
  UIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false         
  UIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UIBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: 'UIBucket'
                  - '/*'
            Principal:
              AWS:
                - '*'             
  EC2Instance:
      Type: 'AWS::EC2::Instance'
      DependsOn: RDSDBInstance
      CreationPolicy:
        ResourceSignal:
          Count: 1
          Timeout: PT30M        
      Metadata:
        'AWS::CloudFormation::Init':
          configSets:
            default:
              - update
              - setup
              - install
              - configure
              - create-tables              
              - create-service-files
              - start-service
              - setupnginx1
              - setupnginx2
            secondary:
              - update
              - setup
              - install
              - configure
              - configure-global-db        
              - create-service-files
              - start-service
              - setupnginx1
              - setupnginx2
          update:
            commands:
              update:
                command: sudo yum update -y
          setup:
            files:
              '/etc/cfn/cfn-hup.conf':
                content: !Sub |
                  [main]
                  stack=${AWS::StackName}
                  region=${AWS::Region}
                  interval=1
                mode: '000400'
                owner: root
                group: root
              '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource EC2Instance --configsets default --region ${AWS::Region}
                  runas=root
                mode: "000400"
                owner: root
                group: root
            services:
              sysvinit:
                cfn-hup:
                  enabled: "true"
                  ensureRunning: "true"
                  files:
                    - "/etc/cfn/cfn-hup.conf"
                    - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          install:
            packages:
              rpm:
                'https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm': []
              yum:
                amazon-cloudwatch-agent: []
                java-1.8.0-openjdk-devel: []
                mariadb: []
          configure:
            commands:
              0-populate-buckets:
                command: !Join
                  - ''
                  - - |
                      #!/bin/bash      
                    - |
                      sudo mkdir /home/ec2-user/UniShopUI/                                                                 
                    - >
                    - export ASSETS_RANDOM_NAME=
                    - !Ref AssetBucket
                    - |+      

                    - >                  
                      sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/UniShopLambda-0.0.1.jar /home/ec2-user/ --no-sign-request  
                    - >                       
                      aws s3 cp /home/ec2-user/UniShopLambda-0.0.1.jar
                      s3://$ASSETS_RANDOM_NAME/   
                    - >                  
                      sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/UniShopAppV1-0.0.1-SNAPSHOT.jar /home/ec2-user/ --no-sign-request  
                    - >
                      sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/create_tables.sql /home/ec2-user/ --no-sign-request                        
                      
          create-tables:
            commands:
              1-create-tables:
                command: !Join
                  - ''
                  - - 'sudo mysql -u UniShopAppV1User -h '
                    - !If [CreatePrimaryDB, !GetAtt RDSClusterPrimary.Endpoint.Address, !GetAtt RDSClusterSecondary.ReadEndpoint.Address]
                    - |2
                       -P 3306 -pUniShopAppV1Password < /home/ec2-user/create_tables.sql                     
          configure-global-db:
            commands:
              1-enable-write-forwarding:
                command: sudo aws rds modify-db-cluster --db-cluster-identifier hot-secondary --region us-west-1 --enable-global-write-forwarding                                  
          create-service-files:
            files:
              /etc/systemd/system/unishop.service:
                encoding: plain
                content: !Join
                  - ''
                  - - |
                      [Unit]
                    - |
                      Description=Restart UniShop
                    - |
                      Wants=network.target
                    - >
                      After=syslog.target network-online.target
                      amazon-cloudwatch-agent.target
                    - |+

                    - |
                      [Service]
                    - |
                      Type=forking
                    - |
                      ExecStart=/home/ec2-user/unishopstart.sh
                    - |
                      ExecReload=/home/ec2-user/unishoprestart.sh
                    - |
                      ExecStop=/home/ec2-user/unishopstop.sh
                    - |                                    
                      PrivateTmp=true
                    - |+

                    - |
                      [Install]
                    - |
                      WantedBy=multi-user.target
                mode: '000644'
                group: root
                user: root
              /home/ec2-user/unishopcfg.sh:
                encoding: plain
                content: !Join
                  - ''
                  - - |
                      #!/bin/bash
                    - export DB_ENDPOINT=
                    - !If [CreatePrimaryDB, !GetAtt RDSClusterPrimary.Endpoint.Address, !GetAtt RDSClusterSecondary.ReadEndpoint.Address]
                    - |+                  
                mode: '000555'
                group: ec2-user
                user: ec2-user
              /home/ec2-user/unishoprestart.sh:
                encoding: plain
                content: !Join
                  - ''
                  - - |
                      #!/bin/bash
                    - |                    
                      source /home/ec2-user/unishopstop.sh
                    - |
                      source /home/ec2-user/unishopstart.sh     
                    - |+
                mode: '000555'
                group: ec2-user
                user: ec2-user
              /home/ec2-user/unishopstop.sh:
                encoding: plain
                content: !Join
                  - ''
                  - - |
                      #!/bin/bash
                    - |
                      APP_NAME=UniShopAppV1-0.0.1-SNAPSHOT.jar                                                                     
                    - | 
                      pid=`ps -ef | grep $APP_NAME | grep -v grep | awk '{print $2}'`
                    - |
                      if [ -z "${pid}" ]; 
                    - |
                      then echo ""
                    - |
                      else
                    - |
                      echo "kill thread...$pid"
                    - |
                      kill -9 $pid                  
                    - |
                      fi
                mode: '000555'
                group: ec2-user
                user: ec2-user              
              /home/ec2-user/unishopstart.sh:
                encoding: plain
                content: !Join
                  - ''
                  - - |
                      #!/bin/bash
                    - |                    
                      source /home/ec2-user/unishopcfg.sh   
                    - >
                    - java -jar
                    - ' '
                    - !If [EnableWriteFwd, '-Dspring.profiles.active=warm ','']
                    - >
                      /home/ec2-user/UniShopAppV1-0.0.1-SNAPSHOT.jar
                      &>
                      /home/ec2-user/app.log
                      &
                mode: '000555'
                group: ec2-user
                user: ec2-user              
              /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
                content: !Join
                  - ''
                  - - |
                      {
                    - |2
                          "logs": {
                    - |2
                              "logs_collected": {
                    - |2
                                  "files": {
                    - |2
                                      "collect_list": [
                    - |2
                                          {
                    - |2
                                              "file_path": "/home/ec2-user/app.log",
                    - !Join
                      - ''
                      - - '                        "log_group_name":'
                        - '"'
                        - !Ref InstanceLogGroup
                        - |
                          ",
                    - !Join
                      - ''
                      - - '                        "log_stream_name":'
                        - '"'
                        - !Ref InstanceLogGroup
                        - |
                          -app",
                    - |2
                                              "timezone": "Local"
                    - |2
                                          }
                    - |2
                                      ]
                    - |2
                                  }
                    - |2
                              }
                    - |2
                          }
                    - '}'
                mode: '000444'
                group: ec2-user
                user: ec2-user
          start-service:
            commands:
              0-start-service:
                command: !Join
                  - ''
                  - - |
                      sudo systemctl daemon-reload
                    - |
                      sudo systemctl enable unishop
                    - |
                      sudo systemctl start unishop
                    - >
                      sudo amazon-cloudwatch-agent-ctl -a fetch-config -s -m ec2
                      -c
                      file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          setupnginx1:
            commands:
              amznextras:
                command: "sudo amazon-linux-extras install nginx1 -y"
          setupnginx2:
            files:
              /etc/nginx/nginx.conf:
                content: !Sub
                  - |
                      user nginx;
                      worker_processes auto;
                      error_log /var/log/nginx/error.log;
                      pid /run/nginx.pid;

                      include /usr/share/nginx/modules/*.conf;

                      events {
                        worker_connections 1024;
                      }

                      http {
                        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                          '$status @body_bytes_sent "@http_referer" '
                                          '"@http_user_agent" "@http_x_forwarded_for"';

                        access_log  /var/log/nginx/access.log main;

                        sendfile            on;
                        tcp_nopush          on;
                        tcp_nodelay         on;
                        keepalive_timeout   65;
                        types_hash_max_size 4096;

                        include             /etc/nginx/mime.types;
                        default_type        application/octet-stream;

                        include /etc/nginx/conf.d/*.conf;

                        server {
                          listen        8080;
                          listen        [::]:8080;
                          location / {
                            proxy_pass ${S3Url};
                          }
                          server_name   _;
                          root          /usr/share/nginx/html;

                          include /etc/nginx/default.d/*.conf;

                          error_page 404 /404.html;
                          location = /404.html {
                          }

                          error_page 500 502 503 504 /50x.html;
                          location = /50x.html {
                          }
                        }
                      }
                  - 
                    S3Url: !GetAtt UIBucket.WebsiteURL
                mode: '000644'
                owner: root
                group: root
            services:
              sysvinit:
                nginx:
                  enabled: 'true'
                  ensureRunning: 'true'
                  files:
                    - "/usr/share/nginx/index.html"
                  sources:
                    - "/etc/nginx/nginx.conf"
      Properties:
        InstanceType: t3.small
        ImageId: !Ref LatestAmiId
        SubnetId: !Ref UniShopAppV1Subnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile: !Ref S3InstanceProfile
        UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash
              - |
                sudo yum install -y aws-cfn-bootstrap
              - |
                exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
              - /opt/aws/bin/cfn-init -v
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource EC2Instance '
              - '         --region '
              - !Ref 'AWS::Region'
              - !If [CreatePrimaryDB, '         --configsets default','         --configsets secondary']
              - |+

              - /opt/aws/bin/cfn-signal -e $?
              - ' --stack '
              - !Ref 'AWS::StackName'
              - ' --resource EC2Instance'
              - ' --region '
              - !Ref 'AWS::Region'
              - |+

        Tags:
          - Key: Name
            Value: !Ref 'AWS::StackName'
  DynamoDBTable:
    Condition: CreatePrimaryDB
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: unishophotstandby
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: s3get
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !If [CreatePrimaryDB, !GetAtt DynamoDBTable.Arn, !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/unishophotstandby']
  AddUnicornToBasket:
    DependsOn: EC2Instance
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref AssetBucket
        S3Key: 'UniShopLambda-0.0.1.jar'
      Runtime: java8
      Description: Service to add unicorns to basket from POST API call
      Handler: com.uniShopApp.Lambda.UnicornBasketImpl::addUnicornToBasket
      MemorySize: 512
      Role: !GetAtt
        - LambdaRole
        - Arn
      Timeout: 15
      Tags:
        - Key: Name
          Value: AddUnicornToBasket
  RemoveUnicornFromBasket:
    DependsOn: EC2Instance
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref AssetBucket
        S3Key: 'UniShopLambda-0.0.1.jar'
      Runtime: java8
      Description: Service to remove unicorns from basket from POST API call
      Handler: com.uniShopApp.Lambda.UnicornBasketImpl::removeUnicornFromBasket
      MemorySize: 512
      Role: !GetAtt
        - LambdaRole
        - Arn
      Timeout: 15
      Tags:
        - Key: Name
          Value: RemoveUnicornFromBasket
  GetUnicornsBasket:
    DependsOn: EC2Instance
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref AssetBucket
        S3Key: 'UniShopLambda-0.0.1.jar'
      Runtime: java8
      Description: Service to get unicorn basket
      Handler: com.uniShopApp.Lambda.UnicornBasketImpl::getUnicornsBasket
      MemorySize: 512
      Role: !GetAtt
        - LambdaRole
        - Arn
      Timeout: 15
      Tags:
        - Key: Name
          Value: GetUnicornsBasket
  UnicornsRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: UnicornsAPIs
      Description: API used for Unicorn Requests
      FailOnWarnings: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  LambdaPermissionPOST:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt
        - AddUnicornToBasket
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref UnicornsRestApi
          - /*
  LambdaPermissionDELETE:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt
        - RemoveUnicornFromBasket
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref UnicornsRestApi
          - /*
  LambdaPermissionGET:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt
        - GetUnicornsBasket
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref UnicornsRestApi
          - /*
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt
        - ApiGatewayCloudWatchLogsRole
        - Arn
  UnicornsRestApiStage:
    DependsOn: ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref UnicornsRestApi
      StageName: Production
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - UnicornsRestApiRequestGET
      - UnicornsBasketUUIDRestApiRequestGET
      - UnicornsBasketRestApiRequestDELETE
      - UnicornsBasketRestApiRequestPOST
      - UserRestApiRequestPOST
      - UserLoginRestApiRequestPOST
    Properties:
      RestApiId: !Ref UnicornsRestApi
  UnicornsRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UnicornsRestApi
      ParentId: !GetAtt
        - UnicornsRestApi
        - RootResourceId
      PathPart: unicorns
  UnicornsBasketRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UnicornsRestApi
      ParentId: !Ref UnicornsRestApiResource
      PathPart: basket
  UnicornsBasketUUIDRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UnicornsRestApi
      ParentId: !Ref UnicornsBasketRestApiResource
      PathPart: '{uuid}'
  UserRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UnicornsRestApi
      ParentId: !GetAtt
        - UnicornsRestApi
        - RootResourceId
      PathPart: user
  UserLoginRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UnicornsRestApi
      ParentId: !Ref UserRestApiResource
      PathPart: login
  UnicornsRestApiRequestGET:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !Join
          - '/'
          - - 'http:/'
            - !GetAtt
              - EC2Instance
              - PublicDnsName
            - 'unicorns'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UnicornsRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsRestApiRequestOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref UnicornsRestApiResource
      RestApiId: !Ref UnicornsRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsBasketRestApiRequestPOST:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - AddUnicornToBasket
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UnicornsBasketRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsBasketRestApiRequestDELETE:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - RemoveUnicornFromBasket
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UnicornsBasketRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsBasketRestApiRequestOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref UnicornsBasketRestApiResource
      RestApiId: !Ref UnicornsRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsBasketUUIDRestApiRequestGET:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.path.uuid: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestParameters:
          integration.request.path.uuid: method.request.path.uuid
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - GetUnicornsBasket
              - Arn
            - /invocations
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
              "uuid" : "$input.params('uuid')"
            }
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UnicornsBasketUUIDRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UnicornsBasketUUIDRestApiRequestOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref UnicornsBasketUUIDRestApiResource
      RestApiId: !Ref UnicornsRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UserRestApiRequestPOST:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: HTTP
        Uri: !Join
          - '/'
          - - 'http:/'
            - !GetAtt
              - EC2Instance
              - PublicDnsName
            - 'user'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UserRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UserRestApiRequestOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref UserRestApiResource
      RestApiId: !Ref UnicornsRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UserLoginRestApiRequestPOST:
    DependsOn: EC2Instance
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: HTTP
        Uri: !Join
          - '/'
          - - 'http:/'
            - !GetAtt
              - EC2Instance
              - PublicDnsName
            - 'user'
            - 'login'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
      ResourceId: !Ref UserLoginRestApiResource
      RestApiId: !Ref UnicornsRestApi
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UserLoginRestApiRequestOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref UserLoginRestApiResource
      RestApiId: !Ref UnicornsRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BuildEC2Instance:
    DependsOn: ApiDeployment
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - update
            - install
            - configure
        update:
          commands:
            update:
              command: sudo yum update -y
        install:
          packages:
            rpm:
              'https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm': []
            yum:
              amazon-cloudwatch-agent: []
              mariadb: []
              java-1.8.0-openjdk-devel: []
        configure:
          commands:
            0-populate-buckets:
              command: !Join
                - ''
                - - |
                    #!/bin/bash      

                  - |
                    sudo mkdir /home/ec2-user/UniShopUI/                              
                
                  - export AWS_DEFAULT_REGION=
                  - !Ref 'AWS::Region'
                  - |+

                  - export UI_RANDOM_NAME=
                  - !Ref UIBucket
                  - |+                                

                  - >
                    sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/UniShopUI/
                    /home/ec2-user/UniShopUI/ --no-sign-request --recursive                                                                 

                  - >
                    aws s3 cp /home/ec2-user/UniShopUI/
                    s3://$UI_RANDOM_NAME/ --recursive                       

                  - >            
                  - export APIGW=
                  - !Sub "https://${UnicornsRestApi}.execute-api.${AWS::Region}.amazonaws.com/${UnicornsRestApiStage}/"
                  - |+                 

                  - export JSON_STRING=
                  - $(echo '{"host":"'"$APIGW"'","region":"'"$AWS_DEFAULT_REGION"'"}')    
                  - |+                                                 

                  - |
                    echo $JSON_STRING | sudo tee /home/ec2-user/UniShopUI/config.json                          

                  - >
                    aws s3 cp /home/ec2-user/UniShopUI/config.json
                    s3://$UI_RANDOM_NAME/               
 
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref UniShopAppV1Subnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref S3InstanceProfile
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              sudo yum install -y aws-cfn-bootstrap
            - /opt/aws/bin/cfn-init -v
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource BuildEC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - '         --configsets default '
            - |+

            - /opt/aws/bin/cfn-signal -e $?
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BuildEC2Instance'
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-build'          
Outputs:
  WebsiteURL:
    Value: !GetAtt UIBucket.WebsiteURL
    Description: Website URL